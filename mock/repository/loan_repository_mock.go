// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modules/loan/repository/type.go
//
// Generated by this command:
//
//	mockgen -package=mock_repository -source=internal/modules/loan/repository/type.go -destination=mock/repository/loan_repository_mock.go -typed
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	loan_model "amartha-technical-interview/internal/modules/loan/model"
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockLoanRepository is a mock of LoanRepository interface.
type MockLoanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoanRepositoryMockRecorder
	isgomock struct{}
}

// MockLoanRepositoryMockRecorder is the mock recorder for MockLoanRepository.
type MockLoanRepositoryMockRecorder struct {
	mock *MockLoanRepository
}

// NewMockLoanRepository creates a new mock instance.
func NewMockLoanRepository(ctrl *gomock.Controller) *MockLoanRepository {
	mock := &MockLoanRepository{ctrl: ctrl}
	mock.recorder = &MockLoanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanRepository) EXPECT() *MockLoanRepositoryMockRecorder {
	return m.recorder
}

// CreateLoan mocks base method.
func (m *MockLoanRepository) CreateLoan(ctx context.Context, userID string, principal, interestRatePercentage, weeklyInstallments float64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", ctx, userID, principal, interestRatePercentage, weeklyInstallments)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockLoanRepositoryMockRecorder) CreateLoan(ctx, userID, principal, interestRatePercentage, weeklyInstallments any) *MockLoanRepositoryCreateLoanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockLoanRepository)(nil).CreateLoan), ctx, userID, principal, interestRatePercentage, weeklyInstallments)
	return &MockLoanRepositoryCreateLoanCall{Call: call}
}

// MockLoanRepositoryCreateLoanCall wrap *gomock.Call
type MockLoanRepositoryCreateLoanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoanRepositoryCreateLoanCall) Return(id string, err error) *MockLoanRepositoryCreateLoanCall {
	c.Call = c.Call.Return(id, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoanRepositoryCreateLoanCall) Do(f func(context.Context, string, float64, float64, float64) (string, error)) *MockLoanRepositoryCreateLoanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoanRepositoryCreateLoanCall) DoAndReturn(f func(context.Context, string, float64, float64, float64) (string, error)) *MockLoanRepositoryCreateLoanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllUserLoans mocks base method.
func (m *MockLoanRepository) GetAllUserLoans(ctx context.Context, userID uuid.UUID) ([]loan_model.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserLoans", ctx, userID)
	ret0, _ := ret[0].([]loan_model.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserLoans indicates an expected call of GetAllUserLoans.
func (mr *MockLoanRepositoryMockRecorder) GetAllUserLoans(ctx, userID any) *MockLoanRepositoryGetAllUserLoansCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserLoans", reflect.TypeOf((*MockLoanRepository)(nil).GetAllUserLoans), ctx, userID)
	return &MockLoanRepositoryGetAllUserLoansCall{Call: call}
}

// MockLoanRepositoryGetAllUserLoansCall wrap *gomock.Call
type MockLoanRepositoryGetAllUserLoansCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoanRepositoryGetAllUserLoansCall) Return(arg0 []loan_model.Loan, arg1 error) *MockLoanRepositoryGetAllUserLoansCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoanRepositoryGetAllUserLoansCall) Do(f func(context.Context, uuid.UUID) ([]loan_model.Loan, error)) *MockLoanRepositoryGetAllUserLoansCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoanRepositoryGetAllUserLoansCall) DoAndReturn(f func(context.Context, uuid.UUID) ([]loan_model.Loan, error)) *MockLoanRepositoryGetAllUserLoansCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLoanByID mocks base method.
func (m *MockLoanRepository) GetLoanByID(ctx context.Context, id uuid.UUID) (loan_model.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanByID", ctx, id)
	ret0, _ := ret[0].(loan_model.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanByID indicates an expected call of GetLoanByID.
func (mr *MockLoanRepositoryMockRecorder) GetLoanByID(ctx, id any) *MockLoanRepositoryGetLoanByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanByID", reflect.TypeOf((*MockLoanRepository)(nil).GetLoanByID), ctx, id)
	return &MockLoanRepositoryGetLoanByIDCall{Call: call}
}

// MockLoanRepositoryGetLoanByIDCall wrap *gomock.Call
type MockLoanRepositoryGetLoanByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoanRepositoryGetLoanByIDCall) Return(arg0 loan_model.Loan, arg1 error) *MockLoanRepositoryGetLoanByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoanRepositoryGetLoanByIDCall) Do(f func(context.Context, uuid.UUID) (loan_model.Loan, error)) *MockLoanRepositoryGetLoanByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoanRepositoryGetLoanByIDCall) DoAndReturn(f func(context.Context, uuid.UUID) (loan_model.Loan, error)) *MockLoanRepositoryGetLoanByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateLoanPayment mocks base method.
func (m *MockLoanRepository) UpdateLoanPayment(ctx context.Context, id uuid.UUID, weeksPayed int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoanPayment", ctx, id, weeksPayed)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoanPayment indicates an expected call of UpdateLoanPayment.
func (mr *MockLoanRepositoryMockRecorder) UpdateLoanPayment(ctx, id, weeksPayed any) *MockLoanRepositoryUpdateLoanPaymentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoanPayment", reflect.TypeOf((*MockLoanRepository)(nil).UpdateLoanPayment), ctx, id, weeksPayed)
	return &MockLoanRepositoryUpdateLoanPaymentCall{Call: call}
}

// MockLoanRepositoryUpdateLoanPaymentCall wrap *gomock.Call
type MockLoanRepositoryUpdateLoanPaymentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoanRepositoryUpdateLoanPaymentCall) Return(arg0 error) *MockLoanRepositoryUpdateLoanPaymentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoanRepositoryUpdateLoanPaymentCall) Do(f func(context.Context, uuid.UUID, int) error) *MockLoanRepositoryUpdateLoanPaymentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoanRepositoryUpdateLoanPaymentCall) DoAndReturn(f func(context.Context, uuid.UUID, int) error) *MockLoanRepositoryUpdateLoanPaymentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
